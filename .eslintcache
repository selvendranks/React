[{"D:\\React\\src\\index.js":"1","D:\\React\\src\\App.js":"2","D:\\react\\src\\index.js":"3","D:\\react\\src\\App.js":"4","D:\\react\\src\\components\\SimpleInput.js":"5","D:\\react\\src\\hooks\\form-validate.js":"6"},{"size":179,"mtime":1648532578000,"results":"7","hashOfConfig":"8"},{"size":467,"mtime":1660543836827,"results":"9","hashOfConfig":"8"},{"size":179,"mtime":1648643023000,"results":"10","hashOfConfig":"11"},{"size":168,"mtime":1648643101000,"results":"12","hashOfConfig":"11"},{"size":4258,"mtime":1667914613995,"results":"13","hashOfConfig":"11"},{"size":1351,"mtime":1667993498416,"results":"14","hashOfConfig":"11"},{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"sydxhk",{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"gjxpny",{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\React\\src\\index.js",[],["30","31"],"D:\\React\\src\\App.js",[],"D:\\react\\src\\index.js",[],["32","33"],"D:\\react\\src\\App.js",[],"D:\\react\\src\\components\\SimpleInput.js",["34"],"import { useEffect, useState } from \"react\";\r\nimport useValidate from \"../hooks/form-validate\";\r\nimport \"../index.css\";\r\n\r\nconst SimpleInput = (props) => {\r\n\r\n  const [formIsValid, setFormIsValid] = useState(false)\r\n\r\n  const nameValidate = (enteredName) => {\r\n    return enteredName.trim() !== \"\";\r\n  };\r\n\r\n  const emailValidate = (enteredEmail)=>{\r\n    const emailPattern = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g;\r\n    return enteredEmail.trim() !== \"\" && emailPattern.test(enteredEmail);\r\n  }\r\n\r\n  const {\r\n    inputValue: enteredName,\r\n    inputHandler: nameInputHandler,\r\n    inputBlurHandler: nameInputBlurHandler,\r\n    inputClasses: nameInputClasses,\r\n    inputIsValid: nameInputIsValid,\r\n    enteredInputIsValid : enteredNameIsValid\r\n  } = useValidate(nameValidate);\r\n\r\n  const {\r\n    inputValue: enteredEmail,\r\n    inputHandler: emailInputHandler,\r\n    inputBlurHandler: emailInputBlurHandler,\r\n    inputClasses: emailInputClasses,\r\n    inputIsValid: emailInputIsValid,\r\n    enteredInputIsValid : enteredEmailIsValid\r\n  } = useValidate(emailValidate);\r\n\r\n\r\n\r\n  //   const [enteredName, setEnteredName] = useState(\"\");\r\n  //   const [enteredEmail, setEnteredEmail] = useState(\"\");\r\n  //   const [enteredNameTouched, setEnteredNameTouched] = useState(false);\r\n  //   const [enteredEmailtouched, setEnteredEmailTouched] = useState(false);\r\n\r\n//   const emailPattern = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/g;\r\n\r\n//   const enteredNameIsValid = enteredName.trim() !== \"\";\r\n//     const enteredEmailIsValid = enteredEmail.trim() !== \"\" && emailPattern.test(enteredEmail);\r\n\r\n  useEffect(()=>{\r\n    if (enteredNameIsValid && enteredEmailIsValid) {\r\n        setFormIsValid(true)\r\n      } else {\r\n        setFormIsValid(false)\r\n      }\r\n  },[enteredEmailIsValid,enteredNameIsValid])\r\n\r\n\r\n\r\n  //   if (enteredNameIsValid && enteredEmailIsValid) {\r\n  //     formIsValid = true;\r\n  //   } else {\r\n  //     formIsValid = false;\r\n  //   }\r\n\r\n  //   const nameInputBlurHandler = (event) => {\r\n  //     setEnteredNameTouched(true);\r\n  //   };\r\n\r\n  //   const emailInputBlurHandler = () => {\r\n  //     setEnteredEmailTouched(true);\r\n  //   };\r\n\r\n  //   const nameInputHandler = (event) => {\r\n  //     setEnteredName(event.target.value);\r\n  //     setEnteredNameTouched(true);\r\n  //   };\r\n\r\n  //   const emailInputHandler = (event) => {\r\n  //     setEnteredEmail(event.target.value);\r\n  //     setEnteredEmailTouched(true);\r\n  //   };\r\n\r\n    // const formSubmitHandler = (event) => {\r\n    //   event.preventDefault();\r\n\r\n    //   setEnteredNameTouched(true);\r\n    //   setEnteredEmailTouched(true);\r\n\r\n    //   if (!enteredNameIsValid) {\r\n    //     //if input is empty\r\n    //     return;\r\n    //   }\r\n    //   setEnteredNameTouched(false);\r\n    //   setEnteredEmailTouched(false);\r\n    //   console.log(enteredName);\r\n    //   setEnteredName(\"\");\r\n    //   setEnteredEmail(\"\");\r\n    // };\r\n\r\n  //   let nameInputIsValid = !enteredNameIsValid && enteredNameTouched;\r\n  //   let emailInputIsValid = !enteredEmailIsValid && enteredEmailtouched;\r\n\r\n  //   let nameInputClasses = nameInputIsValid\r\n  //     ? \"form-control invalid\"\r\n  //     : \"form-control\";\r\n\r\n  //   let emailInputClasses = emailInputIsValid\r\n  //     ? \"form-control invalid\"\r\n  //     : \"form-control\";\r\n\r\n  return (\r\n    <form >\r\n      <div className={nameInputClasses}>\r\n        <label htmlFor=\"name\">Your Name</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"name\"\r\n          onChange={nameInputHandler}\r\n          onBlur={nameInputBlurHandler}\r\n          value={enteredName}\r\n        />\r\n        {nameInputIsValid && (\r\n          <p className=\"error-text\">Name must not be empty</p>\r\n        )}\r\n      </div>\r\n      \r\n      <div className={emailInputClasses}>\r\n        <label htmlFor=\"name\">Your email</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"name\"\r\n          onChange={emailInputHandler}\r\n          onBlur={emailInputBlurHandler}\r\n          value={enteredEmail}\r\n        />\r\n        {emailInputIsValid && (\r\n          <p className=\"error-text\">Name must be valid email</p>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"form-actions\">\r\n        <button disabled={!formIsValid}>Submit</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SimpleInput;\r\n","D:\\react\\src\\hooks\\form-validate.js",["35"],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"36","replacedBy":"40"},{"ruleId":"38","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":14,"column":32,"nodeType":"44","messageId":"45","endLine":14,"endColumn":33,"suggestions":"46"},{"ruleId":"47","severity":1,"message":"48","line":1,"column":22,"nodeType":"49","messageId":"50","endLine":1,"endColumn":30},"no-native-reassign",["51"],"no-negated-in-lhs",["52"],["51"],["52"],"no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["53","54"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"messageId":"55","fix":"56","desc":"57"},{"messageId":"58","fix":"59","desc":"60"},"removeEscape",{"range":"61","text":"62"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"63","text":"64"},"Replace the `\\` with `\\\\` to include the actual backslash character.",[382,383],"",[382,382],"\\"]